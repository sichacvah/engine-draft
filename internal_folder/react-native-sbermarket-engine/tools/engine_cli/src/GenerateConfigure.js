const {ArgumentParser} = require('argparse')
const fs = require('fs')
const path = require('path')

const parseArguments = () => {
  const parser = new ArgumentParser()

  parser.addArgument(['-r', '--root-path'], {
    help: 'path to the root (usually the dirname of package.json)',
    required: true,
  })

  parser.addArgument(['-j', '--package-json-path'], {
    help: 'path to the package.json',
    required: true,
  })

  parser.addArgument(['-w', '--watch'], {
    help:
      'start watching for package.json changes using watchman, this will cause regeneration of modules.js and config.json files',
    action: 'storeTrue',
  })

  parser.addArgument(['--force-localhost'], {
    help:
      "Don't identify the ip, always use 127.0.0.1; this is a preferred method if you are not using " +
      'iOS physical device - otherwise switching networks require restarting the engine CLI',
    action: 'storeTrue',
  })

  parser.addArgument('ignored', {isPositional: true, nargs: '*'})

  return parser.parseArgs()
}



const generateModuleJs = (config, autogeneratedDir) => {
  const moduleFns = config.modules.map((m) => {
    return `'${m}': () => require('${m}').default`
  }).join(',\n  ')
  fs.writeFileSync(
    `${autogeneratedDir}/modules.js`,
    `
    // This file is auto-generated by react-native-sbermarket-engine
    
    export default {
      ${moduleFns}
    };
    `
  )
}

const generateConfigJSON = (config, autogeneratedDir) => {
  fs.writeFileSync(
    `${autogeneratedDir}/config.json`,
    JSON.stringify(config, null, 2),
  )
}

const generateIndexJs = (autogeneratedDir) => {
  const engineParent =
      __dirname.indexOf('/node_modules/') === -1 ? 'internal_folder' : 'node_modules';
    fs.writeFileSync(
      `${autogeneratedDir}/index.js`,
      `require('../${engineParent}/react-native-sbermarket-engine/index')`,
    );
}

const generateRNMetroConfig = () => {
  const newPath = `${__dirname}/../../../../../../metro.config.js`;

  if (!fs.existsSync(newPath)) {
    fs.writeFileSync(newPath, `\
// This file was generated by react-native-sbermarket-enginee on ${new Date().toDateString()}
// You can extend it if you want, but leave the defaults to be required from the engine config
module.exports = {
...require('./node_modules/react-native-sbermarket-engine/tools/engine_cli/etc/metro.config')
};
`);
  }
}

const generateConfig = (params) => {
  const packageJsonPath = path.resolve(params.package_json_path)
  const rootPath = path.resolve(params.root_path)

  const autogeneratedDir = rootPath + '/engine_autogenerated'

  if (!fs.existsSync(autogeneratedDir)) {
    fs.mkdirSync(autogeneratedDir);
  }

  const config = require(packageJsonPath).engineConfig;

  generateModuleJs(config, autogeneratedDir)
  generateConfigJSON(config, autogeneratedDir)
  generateIndexJs(autogeneratedDir)
  generateRNMetroConfig()
}

module.exports = {
  generateConfig,
  parseArguments
}